# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jmw2MORf8pvucbM4UjLO1U6oAypEEkbD

#Gerekli kütüphanelerin import edilmesi
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import GridSearchCV, cross_validate, train_test_split
from sklearn.tree import DecisionTreeClassifier
import missingno as msno
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

"""#Veri setinin okunması"""

df = pd.read_csv("/content/bridges.csv", header=None)

df.head(5)

df.columns = ["id", "river", "location", "erected", "purpose", "length", "lanes" ,"clear_g","t_or_d","material", "span","rel_l", "type"]

df.head(10)

"""#Veri setinin analiz edilmesi"""

print(df.shape)
print(100 * "#")
print(df.info())
print(100 * "#")
print(df.describe())
print(100 * "#")
print(df.head())
print(100 * "#")
print(df.tail())

"""# Floata çevrilemeyen ? verileri nan olarak ayarlandı """

df = df.apply(lambda x: x.apply(lambda y: np.nan if y=="?" else y), axis=1)
df["location"]  = df["location"].astype("float64")
df = df.drop("id", axis = 1)

cat_cols = ["river", "erected", "purpose", "length", "lanes" ,"clear_g","t_or_d","material", "span","rel_l", "type"]
num_cols = ["location"]

print(df.info())

"""#Numerik bağımsız değişkenlerin analizi - Aykırı değer analizi"""

def replace_with_thresholds(dataframe, variable, q1=0.01, q3=0.99):
    low_limit, up_limit = outlier_thresholds(dataframe, variable, q1, q3)
    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit
    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit

def outlier_thresholds(dataframe, col_name, q1=0.01, q3=0.99):
    quartile1 = dataframe[col_name].quantile(q1)
    quartile3 = dataframe[col_name].quantile(q3)
    interquantile_range = quartile3 - quartile1
    up_limit = quartile3 + 1.5 * interquantile_range
    low_limit = quartile1 - 1.5 * interquantile_range
    return low_limit, up_limit

df.describe().T

for col in num_cols:
  sns.distplot(df[col])
  plt.show()
  sns.boxplot(df[col])
  plt.show()

for col in num_cols:
  replace_with_thresholds(df, col, 0.05, 0.95)  #aykiri degerlerin baskılanması

"""#Kategorik bağımsız değişkenlerin analizi"""

for col in cat_cols:
  sns.countplot(x=col, data=df)
  plt.show()

"""##Eksik değer analizi"""

df.isnull().sum()

"""#Eksik verilerin graph olarak gösterilmesi"""

msno.bar(df)

"""#eksik verilerin korelasyonu"""

msno.heatmap(df)

"""#Eksik degerlerin doldurulması"""

df["location"] = df["location"].fillna(df["location"].median()) # sayısal eksik değelerin median ile doldurulması

for col in cat_cols:
  df[col] = df[col].fillna(df[col].mode()[0]) # # kategorik eksik değelerin mod ile doldurulması



"""## veri setinin test ve train olarak ayrılması ve kategorik değişkenlerin encode edilmesi (one hot encoding)

"""

df_son = df[~(df["type"] == "NIL")]

df_son["type"] = LabelEncoder().fit_transform(df_son["type"])
x = df_son.drop("type",axis =1)
x_encoded = pd.get_dummies(x, drop_first=True)
y = df_son["type"]
print(x_encoded)

from imblearn.over_sampling import SMOTEN
sampler = SMOTEN(random_state=0)
X_res, y_res = sampler.fit_resample(x_encoded, y)

X_res.shape, y_res.shape

y_res.value_counts()

x_train, x_test, y_train, y_test = train_test_split(X_res, y_res, test_size = 0.20,random_state=42)
print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)

"""#MODEL OLUŞTURULMASI

"""

model = DecisionTreeClassifier()

"""# MODEL PARAMETRE OPTİMİZASYONU VE K_FOLD CROSS VALIDATION'''"""

params = {
    'max_depth': [2, 3, 5, 10, 20],
    'min_samples_leaf': [5, 10, 20, 50, 100],
    'criterion': ["gini", "entropy"]
}

best_model = GridSearchCV(model, params, cv=10, n_jobs=-1, verbose=False)
best_model.fit(x_train, y_train)

final_model = best_model.best_estimator_
final_model.fit(x_train, y_train)
cv_results = cross_validate(final_model, x_train, y_train, cv=10, scoring=["accuracy"])
cv_results["test_accuracy"].mean()

"""#tahminleme ve sonuçların değerlendirilmesi"""

final_preds = final_model.predict(x_test)
print(classification_report(y_test, final_preds))
accuracy_score(y_test, final_preds)

"""##Karar ağacının görsellleştirilmesi

"""

from sklearn import tree
plt.figure(figsize=(25,25))
tree.plot_tree(final_model);
plt.show()

"""#modelin feature importances değerleri"""

feature_imp = pd.DataFrame({'Value': final_model.feature_importances_, 'Feature': x_train.columns})
plt.figure(figsize=(10, 10))
sns.set(font_scale=1)
sns.barplot(x="Value", y="Feature", data=feature_imp.sort_values(
    by="Value", ascending=False)[0:10])
plt.title('Features')
plt.tight_layout()
plt.show()